/*------------------------------------------------------------------|
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。|
-------------------------------------------------------------------*/

/*	
*
*	执行用时：12 ms, 在所有 C++ 提交中击败了92.44%的用户
*	内存消耗：7.1 MB, 在所有 C++ 提交中击败了94.59%的用户
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <unordered_map>

using namespace std;

bool isValidSudoku(vector<vector<char>>& board)
{
    //一次遍历的方法
    int row[9][9] = { 0 };
    int col[9][9] = { 0 };
    int box[9][9] = { 0 };

    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            if (board[i][j] == '.')
            {
                continue;
            }
            else
            {
                if (row[i][board[i][j] - '1'])                          /*  减'1'是为了对应数组下标   */
                {
                    return false;
                }

                if (col[j][board[i][j] - '1'])
                {
                    return false;
                }

                if (box[j / 3 + (i / 3) * 3][board[i][j] - '1'])
                {
                    return false;
                }

                row[i][board[i][j] - '1'] = 1;
                col[j][board[i][j] - '1'] = 1;
                box[j / 3 + (i / 3) * 3][board[i][j] - '1'] = 1;
            }
        }
    }

    return true;

    //下面为遍历三遍的方法，很蠢

    /*for (int i = 0; i < 9; i++)
    {
        unordered_map<char, int> col;
        for (int j = 0; j < 9; j++)
        {
            if (board[i][j] == '.')
            {
                continue;
            }
            else
            {
                col[board[i][j]]++;
                if (col[board[i][j]] >= 2)
                {
                    return false;
                }
            }
        }
    }

    for (int i = 0; i < 9; i++)
    {
        unordered_map<char, int> row;
        for (int j = 0; j < 9; j++)
        {
            if (board[j][i] == '.')
            {
                continue;
            }
            else
            {
                row[board[j][i]]++;
                if (row[board[j][i]] >= 2)
                {
                    return false;
                }
            }
        }
    }

    for (int x = 0; x < 3; x++)
    {
        for (int y = 0; y < 3; y++)
        {
            unordered_map<char, int> square;
            for (int i = 3 * x; i < 3 * (x + 1); i++)
            {
                for (int j = 3 * y; j < 3 * (y + 1); j++)
                {
                    if (board[i][j] == '.')
                    {
                        continue;
                    }
                    else
                    {
                        square[board[i][j]]++;
                        if (square[board[i][j]] >= 2)
                        {
                            return false;
                        }
                    }
                }
            }
        }
    }
    return true;*/
}
int main()
{    
    vector<vector<char>> board = {  {'.','.','.','.','.','.','5','.','.'},
                                    {'.','.','.','.','.','.','.','.','.'},
                                    {'.','.','.','.','.','.','.','.','.'},
                                    {'9','3','.','.','2','.','4','.','.'},
                                    {'.','.','7','.','.','.','3','.','.'},
                                    {'.','.','.','.','.','.','.','.','.'},
                                    {'.','.','.','3','4','.','.','.','.'},
                                    {'.','.','.','.','.','3','.','.','.'},
                                    {'.','.','.','.','.','5','2','.','.'} };


    int row[9][10] = { 0 };
    int col[9][10] = { 0 };
    int box[9][10] = { 0 };

    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            if (board[i][j] == '.')
            {
                continue;
            }
            else
            {
                if (row[i][board[i][j] - '0'])
                {
                    return false;
                }

                if (col[j][board[i][j] - '0'])
                {
                    return false;
                }

                if (box[j / 3 + (i / 3) * 3][board[i][j] - '0'])
                {
                    return false;
                }

                row[i][board[i][j] - '0'] = 1;
                col[j][board[i][j] - '0'] = 1;
                box[j / 3 + (i / 3) * 3][board[i][j] - '0'] = 1;
            }
        }
    }

    return true;
}